@using GridMvc.Html
@using GridMvc.Sorting
@model ICollection<BookStore.BookData>

<h1>Books Store</h1>
<script language="javascript">

    function getParameterByName(name) {
        name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
        var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
            results = regex.exec(location.search);
        return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
    }

    $(function() {
        $(".js-export-csv").on("click", function(e) {

            var queryString = "?format=csv";

            var dir = getParameterByName("grid-dir");
            if (dir) {
                queryString += "&grid-dir=" + dir;
            }

            var column = getParameterByName("grid-column");
            if (column) {
                queryString += "&grid-column=" + column;
            }

            var filter = getParameterByName("grid-filter");
            if (filter) {
                queryString += "&grid-filter=" + filter;
            }

            e.target.href = e.target.href.split("?")[0] + queryString;
        });
    });

</script>

<div class="row js-grid-container">
    @Html.Grid(Model).Columns(columns =>
    {
        columns.Add().Encoded(false).Sanitized(false).SetWidth(30).RenderValueAs(d =>
            @<b>
                @Html.ActionLink("Edit", "Edit", new {@id = d.BookId})
            </b>);

        columns.Add(o => o.Author);
        columns.Add(o => o.Genre);
        columns.Add(o => o.Rating);
        columns.Add(o => o.Title);

    }).Sortable().Filterable()
</div>
<div class="row">
    @Html.ActionLink("Add new", "Edit", new {@id = 0}, new {@class = "btn btn-primary"})
</div>
<br/>
<div class="row">
    @Html.ActionLink("Export to CSV", "Export", null, new { @class = "btn btn-primary js-export-csv" })
</div>
